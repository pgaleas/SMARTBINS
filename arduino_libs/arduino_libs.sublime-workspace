{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "SensorData/SensorData.cpp",
			"settings":
			{
				"buffer_size": 1976,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n  SensorQueue.cpp - Library for manage data from different sensors.\n  Project SMARTHARVEST - Universidad de La Frontera\n  Created by Patricio Galeas, May 10, 2017.\n*/\n\n#include SensorQueue.h\n\nSensorQueue::SensorQueue(int bufferSize) {\n\t_bufferSize = bufferSize;\n}\n\n/* Add one float value to the queue */\nvoid SensorQueue::push(char dataType, float data){\n\tSensorData data = new SensorData('1', )\n} \n\n/* Add one float array to the queue */\nvoid SensorQueue::push(char dataType, float data[]){\n\n} \n\n/* Add one long value to the queue */\nvoid SensorQueue::push(char dataType, long data){\n\n}\n\n\n/* Add one time_t value to the queue */\nvoid SensorQueue::push(char dataType, time_t data){\n\n}\n\n\n/* Get the last register from the queque */\nSensorData SensorQueue::pop(){\n\n}\n\n/* Get the data contained in _bufferQueueArray, \ncorresponding to the last _bufferSize registers \nfrom _sensorQueueArray */\nSensorData[] SensorQueue::nPop(){\n\n}\n\n\n/* Define the size of the data set to be loaded in the (transmition) buffer */\nvoid SensorQueue::setBufferSize(int newBufferSize) {\n\n}\n\n\t\t \n/* Increase _bufferSize in one register */\nvoid SensorQueue::increaseBufferSize(){\n\n} \n\n/* Decrease _bufferSize in one register */\nvoid SensorQueue::decreaseBufferSize(){\n\n} \n\n/* Get the actual size of _bufferSize */\nint SensorQueue::getBufferSize(){\n\n}\n\n\n/* Moves _bufferSize elements \nfrom _sensorQueueArray to _bufferQueueArray */\nvoid SensorQueue::loadBuffer(){\n\n} \n\n",
			"file": "SensorsQueue/SensorsQueue.cpp",
			"file_size": 1403,
			"file_write_time": 131397803370000000,
			"settings":
			{
				"buffer_size": 1443,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n  SensorData.h - Library for manage data from different sensors.\n  Project SMARTHARVEST - Universidad de La Frontera\n  Created by Patricio Galeas, May 10, 2017.\n*/\n#ifndef SensorData_h\n#define SensorData_h\n\n#include <Arduino.h>\n\nClass SensorData {\n\t\n\tpublic:\n\t\t/* Constructor */\n\t\tSensorData(char dataType, char data[6]);\n\t\t\n\t\t/* Print the sensor data and datatype */\n\t\tvoid print(); // \n\n\tprivate:\n\n\t\t/* Sensor data type :\n\t\t\t0 : Timestamp (4 bytes)\n\t\t\t1 : IMU (6 bytes)\n\t\t\t2 : Temperature (4 bytes)\n\t\t\t3 : Weight (4 bytes) */\n\t\tchar _dataType[6];\n\n\t\t/* Sensor data */\n\t\tchar _data[6];\n\t\t\n};",
			"file": "SensorData/SensorData.h",
			"file_size": 592,
			"file_write_time": 131390071760000000,
			"settings":
			{
				"buffer_size": 595,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n  SensorsQueue.h - Library for manage data from different sensors.\n  Project SMARTHARVEST - Universidad de La Frontera\n  Created by Patricio Galeas, May 10, 2017.\n*/\n#ifndef SensorsQueue_h\n#define SensorsQueue_h\n\n#include <Arduino.h>\n#include <QueueArray.h>\n\nClass SensorsQueue {\n\t\n\tpublic:\n\t\t\n\t\tSensorsQueue(int bufferSize); // Constructor \n\n\t\tvoid setBufferSize(int newBufferSize); // Define the size of the data set to be loaded in the (transmition) buffer\n\n\t\tvoid increaseBufferSize(); // Increase _bufferSize in one register.\n\n\t\tvoid decreaseBufferSize(); // Decrease _bufferSize in one register.\n\n\t\tint getBufferSize(); // Get the actual size of _bufferSize\n\n\t\tvoid push(char dataType, float data); // Add one float value to the queue\n\n\t\tvoid push(char dataType, float data[]); // Add one float array to the queue\n\n\t\tvoid push(char dataType, long data); // Add one long value to the queue\n\n\t\tvoid push(char dataType, time_t data); // Add one time_t value to the queue\n\n\t\tSensorData pop(); // Get the last register from the queque\n\n\t\tSensorData[] nPop(); // Get the data contained in _bufferQueueArray, corresponding to the last _bufferSize registers from _sensorQueueArray\n\n\tprivate:\n\n\t\tint _bufferSize; // Define the number of register to be loaded in the buffer for future transmition. \n\n\t\tQueueArray _sensorQueueArray; // Queue containing the actual stored sensor data\n\n\t\tQueueArray _bufferQueueArray; // Queue containing the data to be transmitted\n\n\t\tvoid loadBuffer(); // Moves _bufferSize elements from _sensorQueueArray to _bufferQueueArray\n\n\n}\n\n#endif\n",
			"file": "SensorsQueue/SensorsQueue.h",
			"file_size": 1323,
			"file_write_time": 131390065540000000,
			"settings":
			{
				"buffer_size": 1569,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README",
			"settings":
			{
				"buffer_size": 469,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"ls"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorData",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorsQueue",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorData",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorsQueue"
	],
	"file_history":
	[
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorData/SensorData.h",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorsQueue/SensorsQueue.h",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorsQueue/SensorsQueue.cpp",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorData/SensorData.cpp",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/README",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorData/keywords.txt",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorsQueue/keywords.txt",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorData.cpp",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorData.h",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/keywords.txt",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorsQueue.h",
		"/Users/patricio/Documents/Arduino/libraries/Morse/Morse.h",
		"/Users/patricio/Documents/Arduino/libraries/Morse/Morse.cpp",
		"/Users/patricio/Documents/Arduino/libraries/Fader/keywords.txt",
		"/Users/patricio/Documents/Arduino/libraries/Fader/Fader.h",
		"/Users/patricio/Documents/Arduino/libraries/Fader/Fader.cpp",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/SensorsStack.h",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/StackRegister.cpp",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/StackRegister.h",
		"/Users/patricio/Documents/github/SMARTHARVEST/arduino_libs/README.md",
		"/Users/patricio/Desktop/smartharvest_libs/StackRegister.cpp",
		"/Users/patricio/Desktop/smartharvest_libs/StackRegister.h",
		"/Users/patricio/Desktop/smartharvest_libs/SensorsStack.h",
		"/Users/patricio/Desktop/smartharvest_libs/SensorsStack.cpp",
		"/Users/patricio/Documents/github/ice-demos/java/IceStorm/weather/Weather.ice",
		"/Users/patricio/Documents/github/ice-demos/java/Freeze/casino/CasinoStore.ice",
		"/Users/patricio/Google Drive/UFRO/ASIGNATURAS/ED-CC/books/lafore/InstructorFiles/Chap05/CircList/circList.java",
		"/Users/patricio/Google Drive/UFRO/ASIGNATURAS/ED-CC/books/lafore/ReaderFiles/Chap05/linkList/linkList.java",
		"/Users/patricio/Documents/github/ice-demos/java/IceStorm/clock/Publisher.java",
		"/Users/patricio/Documents/github/ice-demos/java/IceStorm/clock/Clock.ice",
		"/Users/patricio/Documents/github/ice-demos/java/IceStorm/clock/build.gradle",
		"/Users/patricio/Documents/github/ice-demos/java/IceStorm/clock/Subscriber.java",
		"/Users/patricio/Documents/ejemplos_ice/Client.java",
		"/Users/patricio/Downloads/Server.py",
		"/Users/patricio/Documents/ejemplos_ice/Printer.ice",
		"/Users/patricio/Documents/ejemplos_ice/Server.config",
		"/Users/patricio/Documents/ejemplos_ice/Example/PrinterI.java",
		"/Users/patricio/Documents/ejemplos_ice/Server.java",
		"/Users/patricio/Documents/ejemplos_ice/Example/Printer.java",
		"/Users/patricio/Documents/ejemplos_ice/Example/_PrinterDisp.java",
		"/Users/patricio/Downloads/WorkshopApplets 4/Chap02/Array/Array.html",
		"/Users/patricio/Downloads/IEEEtranBST/IEEEexample.bib",
		"/Users/patricio/Downloads/papers_radiomap.bib",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/java/Server.java",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/java/Server.config",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/java/Printer.ice",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/java/Makefile",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/java/Client.java",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/Example/PrinterI.java",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/Example/Printer.java",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/Makefile",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/Client.java",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/Server.config",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/Printer.ice",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/Server.java",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/Example/_PrinterDisp.java",
		"/Users/patricio/Documents/github/DISPROG-COURSE/code/ice/holamundo/Makefile.make",
		"/Users/patricio/Documents/haskell_examples/baby.hs",
		"/Users/patricio/Google Drive/PROYECTOS/ASTROINGENIERIA/CURSO PROGRAMACIÓN DISTRIBUIDA/Ice/Ice-development/IceGridTest/node2.config",
		"/Users/patricio/Google Drive/PROYECTOS/ASTROINGENIERIA/CURSO PROGRAMACIÓN DISTRIBUIDA/Ice/Ice-development/IceGridTest/node1.config",
		"/Users/patricio/Google Drive/PROYECTOS/IOT/SMART-HARVESTING/admin/Cta. Corriente Proyecto",
		"/Volumes/EV3DEV_BOOT/config.txt",
		"/Users/patricio/Desktop/clientes.json",
		"/Users/patricio/Google Drive/PROYECTOS/ASTROINGENIERIA/CURSO PROGRAMACIÓN DISTRIBUIDA/Ice/Ice-development/python/Printer_ice.py",
		"/Users/patricio/Google Drive/PROYECTOS/ASTROINGENIERIA/CURSO PROGRAMACIÓN DISTRIBUIDA/Ice/Ice-development/python/Server.py",
		"/Users/patricio/Google Drive/PROYECTOS/ASTROINGENIERIA/CURSO PROGRAMACIÓN DISTRIBUIDA/Ice/Ice-development/python/Client.py",
		"/Users/patricio/Google Drive/PROYECTOS/ASTROINGENIERIA/CURSO PROGRAMACIÓN DISTRIBUIDA/Ice/Ice-development/python/Printer.ice",
		"/Users/patricio/Google Drive/PROYECTOS/ASTROINGENIERIA/CURSO PROGRAMACIÓN DISTRIBUIDA/Ice/Ice-development/python/Server.config",
		"/Users/patricio/Google Drive/PROYECTOS/ASTROINGENIERIA/CURSO PROGRAMACIÓN DISTRIBUIDA/Ice/Ice-development/python/Example/__init__.py",
		"/Users/patricio/Google Drive/PROYECTOS/ASTROINGENIERIA/CURSO PROGRAMACIÓN DISTRIBUIDA/Ice/Ice-development/python/Demo/__init__.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"byte",
			"Byte",
			"byte",
			"SensorsStack_h",
			"StackRegister",
			"stack",
			"StackRegister",
			"SensorsStack",
			"Fader",
			"convert",
			"Here the code to convert to string",
			"numeric",
			"String",
			"d",
			"Byte",
			"(\n",
			"Byte",
			"step",
			"Clock",
			"demoIceAsync"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Byte"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "SensorData/SensorData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1976,
						"regions":
						{
						},
						"selection":
						[
							[
								435,
								435
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "SensorsQueue/SensorsQueue.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1443,
						"regions":
						{
						},
						"selection":
						[
							[
								397,
								397
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "SensorData/SensorData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 595,
						"regions":
						{
						},
						"selection":
						[
							[
								502,
								502
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "SensorsQueue/SensorsQueue.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1569,
						"regions":
						{
						},
						"selection":
						[
							[
								976,
								668
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 83.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "README",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 469,
						"regions":
						{
						},
						"selection":
						[
							[
								438,
								468
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.stino_build_panel":
	{
		"height": 0.0
	},
	"output.stino_panel":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "arduino_libs.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 224.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
